/**makes a SQL table to store the overall Regents performance data**/
CREATE TABLE regents (
	id SERIAL PRIMARY KEY,
	borough VARCHAR(15),
	school_dbn VARCHAR(10),
	school_name VARCHAR(100),
	year INT2,
	regents_exam VARCHAR(50),
	total_tested INT2,
	mean_score FLOAT8,
	percent_65_or_above FLOAT8
);

/**makes a SQL table to store the Regents performance data by ELL**/
CREATE TABLE regents_by_ell (
	id SERIAL PRIMARY KEY,
	borough VARCHAR(15),
	school_dbn VARCHAR(10),
	school_name VARCHAR(100),
	year INT2,
	category VARCHAR(50),
	regents_exam VARCHAR(50),
	total_tested INT2,
	mean_score FLOAT8,
	percent_65_or_above FLOAT8
);

/**makes a SQL table to store the Regents performance data by SWD**/
CREATE TABLE regents_by_swd (
	id SERIAL PRIMARY KEY,
	borough VARCHAR(15),
	school_dbn VARCHAR(10),
	school_name VARCHAR(100),
	year INT2,
	category VARCHAR(50),
	regents_exam VARCHAR(50),
	total_tested INT2,
	mean_score FLOAT8,
	percent_65_or_above FLOAT8
);

/**makes a SQL table to store every unique pair of school dbn and name**/
CREATE TABLE schools (
	id SERIAL PRIMARY KEY,
	schools VARCHAR(110)
);

/**makes a SQL table to store the average scores/passing rates of the Regents tests across the boroughs**/
CREATE TABLE borough_avg (
	id SERIAL PRIMARY KEY,
	borough VARCHAR(15),
	regents_exam VARCHAR(50),
	total_tested INT4,
	mean_score FLOAT8,
	percent_65_or_above FLOAT8
);

/**makes a SQL table to store the yearly average scores/passing rates of the Regents tests across the boroughs**/
CREATE TABLE yearly_avg (
	id SERIAL PRIMARY KEY,
	year INT2,
	regents_exam VARCHAR(50),
	total_tested INT4,
	mean_score FLOAT8,
	percent_65_or_above FLOAT8
);

/**Create a list of all pairs of school dbn and school name**/
SELECT
  schools
FROM
  (SELECT
    DISTINCT CONCAT(CONCAT(school_dbn, ': '), school_name) AS schools,
    RIGHT(LEFT(school_dbn, 3), 1) AS borough
  FROM
    regents
  ORDER BY
    borough, schools
  ) AS tb1;